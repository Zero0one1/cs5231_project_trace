import os
import sys
import argparse
import subprocess

from CFG_prototype import MainGenCFG
from s4_get_buf_size import MainGetBufSize
from task3 import MainGetInstrCanary

READ_TRACE = "/home/cs5231project/Desktop/Peekaboo/read_trace"

def parse_arguments(argv):
    parser = argparse.ArgumentParser()
    parser.add_argument('--trace_path', type=str, default="../data/buffer_overflow-6555(vulnerable_trace)/6555", help="The path of trace generated by libpeekaboo.")
    parser.add_argument('--cfg', type=bool, default=False, help="Generate the CFG.")
    parser.add_argument('--ana', type=bool, default=False, help="Analyse the overflowed buffer size and canary.")
    return parser.parse_args(argv)

def preprocess(trace_path):
    trace_idx = trace_path.split('/')[-1]
    os.chdir("../data")

    p1 = subprocess.call([READ_TRACE, trace_path, ">", f"{trace_idx}.all"], shell=False)
    p2 = subprocess.call([READ_TRACE, trace_path, "-mr", ">", f"{trace_idx}.allrm"], shell=False)
    exit_codes = subprocess.wait([p for p in (p1, p2)])

    os.chdir("../code")

def main(args):
    trace_idx = args.trace_path.split('/')[-1]
    trace_s_file = f"../data/{trace_idx}.all"
    trace_rm_file = trace_s_file + "rm"

    if args.cfg:
        MainGenCFG(READ_TRACE, args.trace_path)
    if args.ana:
        canary_instr_r, canary_instr_w = MainGetInstrCanary(trace_s_file, args.trace_path)
        buf_size = MainGetBufSize(trace_s_file, trace_rm_file, canary_instr_r["address"], canary_instr_w["address"])

if __name__ == "__main__":

    cur_path = os.getcwd()
    if not cur_path.endswith("code"):
        print("Usage: run this script under cs5231_project_trace/code.")
        exit

    args = parse_arguments(sys.argv[1:])

    #preprocess(args.trace_path)

    main(args)
